/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConversationParticipant as PrismaConversationParticipant,
  Conversation as PrismaConversation,
  User as PrismaUser,
} from "@prisma/client";

export class ConversationParticipantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationParticipantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationParticipant.count(args);
  }

  async conversationParticipants<
    T extends Prisma.ConversationParticipantFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConversationParticipantFindManyArgs>
  ): Promise<PrismaConversationParticipant[]> {
    return this.prisma.conversationParticipant.findMany<Prisma.ConversationParticipantFindManyArgs>(
      args
    );
  }
  async conversationParticipant<
    T extends Prisma.ConversationParticipantFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConversationParticipantFindUniqueArgs>
  ): Promise<PrismaConversationParticipant | null> {
    return this.prisma.conversationParticipant.findUnique(args);
  }
  async createConversationParticipant<
    T extends Prisma.ConversationParticipantCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConversationParticipantCreateArgs>
  ): Promise<PrismaConversationParticipant> {
    return this.prisma.conversationParticipant.create<T>(args);
  }
  async updateConversationParticipant<
    T extends Prisma.ConversationParticipantUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConversationParticipantUpdateArgs>
  ): Promise<PrismaConversationParticipant> {
    return this.prisma.conversationParticipant.update<T>(args);
  }
  async deleteConversationParticipant<
    T extends Prisma.ConversationParticipantDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConversationParticipantDeleteArgs>
  ): Promise<PrismaConversationParticipant> {
    return this.prisma.conversationParticipant.delete(args);
  }

  async getConversation(parentId: string): Promise<PrismaConversation | null> {
    return this.prisma.conversationParticipant
      .findUnique({
        where: { id: parentId },
      })
      .conversation();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.conversationParticipant
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
