/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ConversationParticipant } from "./ConversationParticipant";
import { ConversationParticipantCountArgs } from "./ConversationParticipantCountArgs";
import { ConversationParticipantFindManyArgs } from "./ConversationParticipantFindManyArgs";
import { ConversationParticipantFindUniqueArgs } from "./ConversationParticipantFindUniqueArgs";
import { CreateConversationParticipantArgs } from "./CreateConversationParticipantArgs";
import { UpdateConversationParticipantArgs } from "./UpdateConversationParticipantArgs";
import { DeleteConversationParticipantArgs } from "./DeleteConversationParticipantArgs";
import { Conversation } from "../../conversation/base/Conversation";
import { User } from "../../user/base/User";
import { ConversationParticipantService } from "../conversationParticipant.service";
@graphql.Resolver(() => ConversationParticipant)
export class ConversationParticipantResolverBase {
  constructor(protected readonly service: ConversationParticipantService) {}

  async _conversationParticipantsMeta(
    @graphql.Args() args: ConversationParticipantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ConversationParticipant])
  async conversationParticipants(
    @graphql.Args() args: ConversationParticipantFindManyArgs
  ): Promise<ConversationParticipant[]> {
    return this.service.conversationParticipants(args);
  }

  @graphql.Query(() => ConversationParticipant, { nullable: true })
  async conversationParticipant(
    @graphql.Args() args: ConversationParticipantFindUniqueArgs
  ): Promise<ConversationParticipant | null> {
    const result = await this.service.conversationParticipant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConversationParticipant)
  async createConversationParticipant(
    @graphql.Args() args: CreateConversationParticipantArgs
  ): Promise<ConversationParticipant> {
    return await this.service.createConversationParticipant({
      ...args,
      data: {
        ...args.data,

        conversation: args.data.conversation
          ? {
              connect: args.data.conversation,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ConversationParticipant)
  async updateConversationParticipant(
    @graphql.Args() args: UpdateConversationParticipantArgs
  ): Promise<ConversationParticipant | null> {
    try {
      return await this.service.updateConversationParticipant({
        ...args,
        data: {
          ...args.data,

          conversation: args.data.conversation
            ? {
                connect: args.data.conversation,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConversationParticipant)
  async deleteConversationParticipant(
    @graphql.Args() args: DeleteConversationParticipantArgs
  ): Promise<ConversationParticipant | null> {
    try {
      return await this.service.deleteConversationParticipant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Conversation, {
    nullable: true,
    name: "conversation",
  })
  async getConversation(
    @graphql.Parent() parent: ConversationParticipant
  ): Promise<Conversation | null> {
    const result = await this.service.getConversation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: ConversationParticipant
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
