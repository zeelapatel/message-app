/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Conversation as PrismaConversation,
  ConversationParticipant as PrismaConversationParticipant,
  Message as PrismaMessage,
} from "@prisma/client";

export class ConversationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversation.count(args);
  }

  async conversations<T extends Prisma.ConversationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFindManyArgs>
  ): Promise<PrismaConversation[]> {
    return this.prisma.conversation.findMany<Prisma.ConversationFindManyArgs>(
      args
    );
  }
  async conversation<T extends Prisma.ConversationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFindUniqueArgs>
  ): Promise<PrismaConversation | null> {
    return this.prisma.conversation.findUnique(args);
  }
  async createConversation<T extends Prisma.ConversationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationCreateArgs>
  ): Promise<PrismaConversation> {
    return this.prisma.conversation.create<T>(args);
  }
  async updateConversation<T extends Prisma.ConversationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationUpdateArgs>
  ): Promise<PrismaConversation> {
    return this.prisma.conversation.update<T>(args);
  }
  async deleteConversation<T extends Prisma.ConversationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationDeleteArgs>
  ): Promise<PrismaConversation> {
    return this.prisma.conversation.delete(args);
  }

  async findConversationParticipants(
    parentId: string,
    args: Prisma.ConversationParticipantFindManyArgs
  ): Promise<PrismaConversationParticipant[]> {
    return this.prisma.conversation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conversationParticipants(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.conversation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }
}
